using BC = MGroup.DrugDeliveryModel.Tests.Commons.BoundaryAndInitialConditionsUtility.BoundaryConditionCase;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using MGroup.MSolve.Discretization.Entities;
using MGroup.MSolve.Discretization.Dofs;
using MGroup.MSolve.Numerics.Interpolation.Jacobians;
using MGroup.DrugDeliveryModel.Tests.EquationModels;
using MGroup.NumericalAnalyzers.Dynamic;
using MGroup.NumericalAnalyzers.Logging;
using MGroup.NumericalAnalyzers.Staggered;
using MGroup.NumericalAnalyzers.Discretization.NonLinear;
using MGroup.Constitutive.Structural;
using MGroup.DrugDeliveryModel.Tests.Commons;
using MGroup.NumericalAnalyzers;
using MGroup.Solvers.Direct;
using Xunit;
using MGroup.Constitutive.ConvectionDiffusion;
using MGroup.Constitutive.ConvectionDiffusion.BoundaryConditions;
using MGroup.Constitutive.ConvectionDiffusion.InitialConditions;
using System.Diagnostics;
using MGroup.FEM.ConvectionDiffusion.Tests.Commons;

namespace MGroup.DrugDeliveryModel.Tests.Integration
{
    public class EquationCOxVanillaNL
    {
        //---------------------------------------Equation Cox---------------------------------------

        //---------------------------------------Variables------------------------------------------

        private Dictionary<int, double[]> DomainFluidVelocity = new Dictionary<int, double[]>(); // 2.32E-4 [m/s]

        //private Dictionary<int, double> DomainIndependentSource = new Dictionary<int, double>();

        //private Dictionary<int, double> DomainDependentSource = new Dictionary<int, double>(); 

        double FluidInit = -2.32;
        //double FluidInit = -1.0;
        /// <summary>
        /// Diffusivity of oxygen [m2/s]
        /// </summary>
        private const double Dox = 1.79E-4; // [m2/s]

        /// <summary>
        /// Oxygen uptake [mol/(m3*s)]
        /// </summary>
        private const double Aox = 2.5463E-2; // [mol/(m3*s)]

        /// <summary>
        /// Oxygen uptake [mol/m3]
        /// </summary>
        private const double Kox = 4.64E-3; // [mol / m3]

        /// <summary>
        /// Oxygen permeability across tumor vessel walls [m/s]
        /// </summary>
        private const double PerOx = 3.55E-4; // [m/s]

        /// <summary>
        /// Vascular Density [1/m]
        /// </summary>
        private const double Sv = 7E3; // [1/m]

        /// <summary>
        /// Initial Oxygen Concentration [mol/m3]
        /// </summary>
        private const double CInitialOx = 0; // [mol/m3]

        /// <summary>
        /// Rhs [mol/m3]
        /// </summary>
        private const double CiOx = 0.2; // [mol/m3]
        const double TInit = 500;
        /// <summary>
        /// Cancer cell density [1]
        /// </summary>
        private Dictionary<int, double> T = new Dictionary<int, double>();// 500 [cells]

        //---------------------------------------Logging----------------------------------
        /// <summary>
        /// The degree of freedom that will be monitored for equation cox
        /// </summary>
        private ConvectionDiffusionDof coxMonitorDOF = ConvectionDiffusionDof.UnknownVariable;

        /// <summary>
        /// The coordinates of the monitored node
        /// </summary>
        private double[] monitorNodeCoords = { 0.09, 0.0, 0.08 };


        //---------------------------------------Time Discretization Specs------------------------------
        private const double TotalTime = 1E-2;

        /// <summary>
        /// For increased accuracy use time-step of order 1E-5
        /// </summary>
        private const double TimeStep = 1E-5;// sec

        /// <summary>
        /// Simplified version of the independent production term without non-linear term
        /// </summary>
        public Func<double> IndependentLinearSource = () => PerOx * Sv * CiOx;

        public Func<double> DependentLinearSource => null;// () => -PerOx * Sv;

        private Dictionary<int, Func<double, double>> ProductionFuncsWithoutConstantTerm = new Dictionary<int, Func<double, double>>();
        public Func<double, double> getProductionFuncWithoutConstantTerm(int i)
        {
            return (double Cox) => -PerOx * Sv * (CiOx - Cox) - Aox * T[i] * Cox / (Cox + Kox);
            //return (double Cox) => -PerOx * Sv * Cox; //Linear
        }

        private Dictionary<int, Func<double, double>> ProductionFuncsWithoutConstantTermDerivative = new Dictionary<int, Func<double, double>>();
        public Func<double, double> getProductionFuncWithoutConstantTermDerivative(int i)
        {
            return (double Cox) => -PerOx * Sv - Aox * T[i] / (Cox + Kox) + Aox * T[i] * Cox * Math.Pow(Cox + Kox, -2);
            //return (double Cox) => -PerOx * Sv; //Linear
        }

        static double[] expectedLinSolution = new double[]
            {0.00027617099601129385,
             0.00082795347593641352,
             0.0013786176765330069,
             0.0019281650868235782,
             0.0024765971944125868,
             0.00302391548549161,
             0.003570121444844468,
             0.0041152165558522892,
             0.0046592023004985586,
             0.0052020801593741341,
             0.0057438516116821775,
             0.0062845181352431112,
             0.0068240812064995068,
             0.007362542300520903,
             0.0078999028910086543,
             0.0084361644503007076,
             0.0089713284493762886,
             0.0095053963578606761,
             0.010038369644029817,
             0.01057024977481494};

        static double[] expectedFromComsol = new double[]
        {0.0007129565223671997, 0.0010666609276386, 0.0014182726753743, 0.0017679034690053, 0.0021155406016867, 0.0024612345221367, 0.0028050506063947, 0.0031470540006927, 0.0034873053358745, 0.0038258599357506, 0.0041627680836797, 0.0044980755555751, 0.00483182417161, 0.0051640522969102, 0.0054947952781904, 0.0058240858200981, 0.0061519543090138, 0.0064784290921262, 0.0068035367186388, 0.0071273021488608, 0.0074497489359541, 0.007770899384284, 0.0080907746876537, 0.0084093950501547, 0.0087267797919301, 0.0090429474417821, 0.0093579158182686, 0.0096717021006885, 0.0099843228911607, 0.0102957942688366, 0.010606131837152, 0.0109153507649102, 0.0112234658218934, 0.0115304914096227, 0.0118364415878148, 0.0121413300970322, 0.0124451703779684, 0.0127479755877707, 0.0130497586137648, 0.0133505320849105, 0.0136503083812897, 0.0139490996418993, 0.0142469177709986, 0.0145437744432343, 0.014839681107749, 0.0151346489914548, 0.0154286891016381, 0.0157218122280411, 0.0160140289445498, 0.0163053496106028, 0.0165957843724192, 0.0168853431641316, 0.0171740357088945, 0.0174618715200298, 0.0177488599022583, 0.0180350099530554, 0.0183203305641626, 0.0186048304232753, 0.0188885180159237, 0.0191714016275538, 0.0194534893458128, 0.0197347890630368, 0.0200153084789357, 0.0202950551034669, 0.020574036259886, 0.020852259087962, 0.0211297305473407, 0.0214064574210431, 0.0216824463190791, 0.0219577036821623, 0.0222322357855078, 0.022506048742697, 0.0227791485095935, 0.023051540888294, 0.0233232315311012, 0.0235942259445029, 0.0238645294931471, 0.0241341474037992, 0.0244030847692716, 0.0246713465523166, 0.0249389375894722, 0.0252058625948549, 0.0254721261638918, 0.0257377327769859, 0.0260026868031099, 0.0262669925033245, 0.0265306540342171, 0.0267936754512583, 0.0270560607120737, 0.02731781367963, 0.0275789381253333, 0.0278394377320396, 0.0280993160969769, 0.0283585767345796, 0.0286172230792343, 0.0288752584879389, 0.0291326862428763, 0.0293895095539022, 0.0296457315609502, 0.0299013553363544, 0.0301563838870927, 0.0304108201569502, 0.0306646670286079, 0.030917927325655, 0.0311706038145302, 0.0314226992063917, 0.0316742161589183, 0.0319251572780458, 0.0321755251196373, 0.0324253221910925, 0.0326745509528966, 0.0329232138201111, 0.0331713131638087, 0.0334188513124541, 0.0336658305532325, 0.0339122531333286, 0.0341581212611561, 0.0344034371075419, 0.0346482028068651, 0.0348924204581523, 0.0351360921261327, 0.0353792198422527, 0.0356218056056524, 0.0358638513841055, 0.0361053591149239, 0.036346330705829, 0.0365867680357893, 0.0368266729558283, 0.0370660472898017, 0.0373048928351458, 0.037543211363599, 0.0377810046218965, 0.0380182743324397, 0.0382550221939415, 0.038491249882048, 0.0387269590499386, 0.0389621513289039, 0.0391968283289031, 0.0394309916391025, 0.0396646428283945, 0.0398977834458983, 0.0401304150214439, 0.0403625390660391, 0.04059415707232, 0.0408252705149876, 0.0410558808512278, 0.0412859895211192, 0.0415155979480258, 0.0417447075389778, 0.0419733196850394, 0.0422014357616648, 0.0424290571290426, 0.0426561851324296, 0.0428828211024733, 0.0431089663555248, 0.0433346221939421, 0.0435597899063834, 0.0437844707680918, 0.0440086660411715, 0.044232376974855, 0.0444556048057636, 0.0446783507581587, 0.0449006160441869, 0.0451224018641172, 0.0453437094065723, 0.0455645398487522, 0.0457848943566524, 0.0460047740852759, 0.0462241801788385, 0.0464431137709701, 0.0466615759849086, 0.0468795679336904, 0.0470970907203348, 0.0473141454380239, 0.0475307331702778, 0.0477468549911253, 0.0479625119652702, 0.0481777051482539, 0.0483924355866132, 0.0486067043180346, 0.0488205123715052, 0.0490338607674596, 0.0492467505179231, 0.0494591826266521, 0.049671158089271, 0.0498826778934057, 0.0500937430188146, 0.0503043544375161, 0.0505145131139139, 0.0507242200049191, 0.0509334760600694, 0.051142282221647, 0.0513506394247922, 0.0515585485976162, 0.0517660106613109, 0.0519730265302562, 0.0521795971121258, 0.0523857233079904, 0.0525914060124188, 0.0527966461135777, 0.0530014444933287, 0.0532058020273242, 0.0534097195851008, 0.0536131980301716, 0.0538162382201166, 0.0540188410066711, 0.0542210072358129, 0.054422737747848, 0.0546240333774943, 0.0548248949539646, 0.0550253233010473, 0.0552253192371864, 0.0554248835755598, 0.0556240171241565, 0.0558227206858523, 0.0560209950584842, 0.0562188410349243, 0.0564162594031513, 0.056613250946322, 0.0568098164428411, 0.0570059566664295, 0.057201672386193, 0.057396964366688, 0.0575918333679878, 0.0577862801457468, 0.0579803054512648, 0.0581739100315489, 0.0583670946293761, 0.0585598599833537, 0.0587522068279796, 0.058944135893701, 0.0591356479069732, 0.0593267435903167, 0.0595174236623739, 0.0597076888379648, 0.0598975398281423, 0.060086977340246, 0.0602760020779562, 0.0604646147413463, 0.0606528160269347, 0.0608406066277364, 0.0610279872333136, 0.0612149585298251, 0.0614015212000761, 0.0615876759235663, 0.061773423376538, 0.0619587642320232, 0.0621436991598902, 0.0623282288268896, 0.0625123538966995, 0.0626960750299705, 0.0628793928843695, 0.0630623081146232, 0.0632448213725614, 0.0634269333071592, 0.0636086445645784, 0.0637899557882093, 0.0639708676187111, 0.0641513806940521, 0.0643314956495492, 0.064511213117907, 0.0646905337292564, 0.0648694581111927, 0.0650479868888127, 0.0652261206847522, 0.0654038601192222, 0.0655812058100452, 0.0657581583726901, 0.0659347184203081, 0.0661108865637664, 0.0662866634116831, 0.0664620495704602, 0.066637045644317, 0.0668116522353229, 0.0669858699434296, 0.0671596993665029, 0.0673331411003539, 0.0675061957387705, 0.0676788638735473, 0.0678511460945158, 0.0680230429895747, 0.0681945551447181, 0.0683656831440654, 0.0685364275698891, 0.0687067890026428, 0.0688767680209894, 0.0690463652018279, 0.0692155811203201, 0.0693844163499177, 0.0695528714623879, 0.0697209470278391, 0.0698886436147467, 0.0700559617899777, 0.0702229021188154, 0.0703894651649836, 0.0705556514906707, 0.0707214616565531, 0.0708868962218186, 0.071051955744189, 0.0712166407799427, 0.0713809518839371, 0.0715448896096303, 0.0717084545091026, 0.0718716471330779, 0.0720344680309442, 0.0721969177507747, 0.0723589968393478, 0.072520705842167, 0.0726820453034807, 0.0728430157663015, 0.0730036177724252, 0.0731638518624497, 0.0733237185757934, 0.0734832184507135, 0.0736423520243236, 0.0738011198326119, 0.0739595224104579, 0.0741175602916501, 0.0742752340089025, 0.0744325440938712, 0.0745894910771706, 0.0747460754883898, 0.074902297856108, 0.0750581587079105, 0.0752136585704034, 0.0753687979692294, 0.0755235774290818, 0.0756779974737199, 0.0758320586259827, 0.0759857614078035, 0.0761391063402235, 0.0762920939434058, 0.0764447247366485, 0.0765969992383982, 0.076748917966263, 0.0769004814370252, 0.0770516901666543, 0.0772025446703189, 0.0773530454623994, 0.0775031930564998, 0.0776529879654596, 0.0778024307013653, 0.0779515217755623, 0.0781002616986657, 0.0782486509805717, 0.0783966901304685, 0.0785443796568469, 0.0786917200675109, 0.0788387118695886, 0.0789853555695417, 0.079131651673176, 0.0792776006856516, 0.0794232031114919, 0.0795684594545941, 0.079713370218238, 0.0798579359050958, 0.0800021570172407, 0.0801460340561567, 0.0802895675227468, 0.0804327579173421, 0.0805756057397104, 0.0807181114890646, 0.0808602756640709, 0.0810020987628576, 0.0811435812830223, 0.0812847237216407, 0.081425526575274, 0.0815659903399767, 0.0817061155113044, 0.0818459025843209, 0.081985352053606, 0.0821244644132625, 0.0822632401569236, 0.0824016797777596, 0.0825397837684852, 0.082677552621366, 0.0828149868282257, 0.0829520868804522, 0.0830888532690047, 0.0832252864844196, 0.0833613870168172, 0.0834971553559078, 0.083632591990998, 0.0837676974109967, 0.0839024721044211, 0.0840369165594024, 0.084171031263692, 0.084304816704667, 0.0844382733693357, 0.0845714017443434, 0.0847042023159779, 0.0848366755701746, 0.0849688219925223, 0.085100642068268, 0.0852321362823222, 0.0853633051192642, 0.085494149063347, 0.0856246685985019, 0.0857548642083442, 0.0858847363761771, 0.086014285584997, 0.0861435123174981, 0.0862724170560769, 0.0864010002828366, 0.0865292624795921, 0.0866572041278737, 0.086784825708932, 0.086912127703742, 0.087039110593007, 0.0871657748571635, 0.0872921209763846, 0.0874181494305841, 0.087543860699421, 0.087669255262303, 0.0877943335983901, 0.0879190961865991, 0.0880435435056068, 0.0881676760338538, 0.0882914942495483, 0.0884149986306694, 0.0885381896549707, 0.088661067799984, 0.0887836335430225, 0.0889058873611838, 0.089027829731354, 0.0891494611302103, 0.0892707820342243, 0.0893917929196653, 0.0895124942626033, 0.0896328865389121, 0.0897529702242719, 0.0898727457941729, 0.0899922137239175, 0.0901113744886237, 0.0902302285632273, 0.0903487764224851, 0.0904670185409774, 0.0905849553931105, 0.0907025874531194, 0.0908199151950704, 0.0909369390928634, 0.0910536596202343, 0.0911700772507577, 0.0912861924578488, 0.0914020057147659, 0.0915175174946127, 0.0916327282703402, 0.0917476385147493, 0.0918622487004924, 0.0919765593000756, 0.0920905707858609, 0.0922042836300678, 0.0923176983047754, 0.0924308152819245, 0.0925436350333188, 0.092656158030627, 0.0927683847453848, 0.0928803156489959, 0.0929919512127344, 0.0931032919077455, 0.0932143382050478, 0.0933250905755345, 0.0934355494899747, 0.0935457154190151, 0.093655588833181, 0.0937651702028779, 0.0938744599983926, 0.0939834586898947, 0.0940921667474374, 0.0942005846409588, 0.094308712840283, 0.0944165518151214, 0.0945241020350732, 0.0946313639696268, 0.0947383380881606, 0.0948450248599439, 0.0949514247541375, 0.0950575382397952, 0.0951633657858636, 0.0952689078611837, 0.0953741649344912, 0.0954791374744169, 0.095583825949488, 0.095688230828128, 0.0957923525786576, 0.0958961916692952, 0.0959997485681572, 0.0961030237432585, 0.0962060176625129, 0.0963087307937336, 0.0964111636046331, 0.096513316562824, 0.0966151901358189, 0.0967167847910308, 0.0968181009957731, 0.0969191392172599, 0.0970198999226061, 0.0971203835788274, 0.0972205906528405, 0.0973205216114627, 0.0974201769214126, 0.0975195570493094, 0.0976186624616731, 0.0977174936249244, 0.0978160510053845, 0.097914335069275, 0.0980123462827175, 0.0981100851117338, 0.0982075520222451, 0.0983047474800722, 0.0984016719509348, 0.0984983259004515, 0.0985947097941393, 0.098690824097413, 0.0987866692755851, 0.0988822457938653, 0.0989775541173599, 0.0990725947110712, 0.0991673680398975, 0.099261874568632, 0.0993561147619625, 0.0994500890844707, 0.0995437980006318, 0.0996372419748137, 0.0997304214712762, 0.0998233369541708, 0.0999159888875394, 0.1000083777353142, 0.1001005039613165, 0.1001923680292559, 0.1002839704027301, 0.1003753115452236, 0.1004663919201068, 0.1005572119906357, 0.1006477722199505, 0.1007380730710752, 0.1008281150069163, 0.1009178984902621, 0.1010074239837819, 0.1010966919500249, 0.101185702851419, 0.1012744571502706, 0.1013629553087629, 0.1014511977889551, 0.1015391850527814, 0.1016269175620504, 0.1017143957784431, 0.101801620163513, 0.1018885911786842, 0.1019753092852505, 0.1020617749443747, 0.102147988617087, 0.1022339507642841, 0.1023196618467282, 0.1024051223250457, 0.1024903326597262, 0.1025752933111211, 0.1026600047394427, 0.1027444674047628, 0.1028286817670117, 0.1029126482859771, 0.1029963674213026, 0.1030798396324864, 0.1031630653788808, 0.1032460451196901, 0.10332877931397, 0.1034112684206258, 0.1034935128984118, 0.1035755132059296, 0.1036572698016267, 0.1037387831437959, 0.1038200536905732, 0.1039010818999371, 0.1039818682297072, 0.1040624131375427, 0.1041427170809412, 0.1042227805172375, 0.1043026039036022, 0.1043821876970406, 0.1044615323543908, 0.104540638332323, 0.1046195060873379, 0.1046981360757655, 0.1047765287537636, 0.1048546845773163, 0.1049326040022334, 0.1050102874841481, 0.1050877354785163, 0.1051649484406151, 0.1052419268255412, 0.1053186710882099, 0.1053951816833537, 0.1054714590655206, 0.1055475036890731, 0.1056233160081868, 0.1056988964768488, 0.1057742455488565, 0.1058493636778163, 0.1059242513171422, 0.1059989089200542, 0.1060733369395774, 0.1061475358285401, 0.1062215060395729, 0.106295248025107, 0.106368762237373, 0.1064420491283994, 0.1065151091500115, 0.1065879427538298, 0.1066605503912686, 0.1067329325135347, 0.1068050895716264, 0.1068770220163313, 0.1069487302982258, 0.1070202148676734, 0.1070914761748229, 0.1071625146696081, 0.1072333308017452, 0.1073039250207325, 0.1073742977758483, 0.1074444495161501, 0.1075143806904729, 0.1075840917474278, 0.107653583135401, 0.1077228553025524, 0.1077919086968138, 0.1078607437658882, 0.107929360957248, 0.107997760718134, 0.1080659434955536, 0.1081339097362802, 0.1082016598868512, 0.1082691943935671, 0.1083365137024899, 0.1084036182594421, 0.108470508510005, 0.1085371848995177, 0.108603647873076, 0.1086698978755304, 0.1087359353514855, 0.1088017607452983, 0.1088673745010773, 0.1089327770626805, 0.1089979688737152, 0.1090629503775356, 0.1091277220172425, 0.1091922842356813, 0.1092566374754411, 0.1093207821788535, 0.1093847187879911, 0.1094484477446665, 0.1095119694904309, 0.1095752844665727, 0.109638393114117, 0.1097012958738232, 0.109763993186185, 0.1098264854914282, 0.1098887732295102, 0.1099508568401182, 0.1100127367626685, 0.1100744134363049, 0.1101358872998979, 0.1101971587920432, 0.1102582283510606, 0.1103190964149927, 0.1103797634216042, 0.1104402298083802, 0.1105004960125251, 0.1105605624709617, 0.1106204296203301, 0.110680097896986, 0.1107395677370002, 0.1107988395761571, 0.1108579138499537, 0.1109167909935983, 0.1109754714420096, 0.1110339556298154, 0.1110922439913518, 0.1111503369606615, 0.1112082349714934, 0.1112659384573011, 0.1113234478512415, 0.1113807635861747, 0.1114378860946618, 0.1114948158089646, 0.1115515531610441, 0.1116080985825596, 0.1116644525048679, 0.1117206153590215, 0.1117765875757684, 0.1118323695855505, 0.1118879618185028, 0.1119433647044522, 0.1119985786729167, 0.1120536041531042, 0.1121084415739114, 0.1121630913639229, 0.1122175539514105, 0.1122718297643315, 0.1123259192303282, 0.1123798227767268, 0.1124335408305365, 0.1124870738184483, 0.112540422166834, 0.1125935863017455, 0.1126465666489135, 0.1126993636337471, 0.1127519776813318, 0.1128044092164298, 0.1128566586634779, 0.1129087264465874, 0.1129606129895427, 0.1130123187158005, 0.1130638440484887, 0.1131151894104059, 0.1131663552240197, 0.1132173419114668, 0.1132681498945511, 0.1133187795947433, 0.1133692314331801, 0.1134195058306628, 0.1134696032076569, 0.1135195239842907, 0.113569268580355, 0.1136188374153017, 0.1136682309082431, 0.1137174494779509, 0.1137664935428558, 0.1138153635210457, 0.1138640598302658, 0.113912582887917, 0.1139609331110556, 0.1140091109163919, 0.1140571167202897, 0.1141049509387653, 0.1141526139874868, 0.1142001062817729, 0.1142474282365925, 0.1142945802665634, 0.1143415627859518, 0.1143883762086714, 0.1144350209482824, 0.1144814974179908, 0.1145278060306475, 0.1145739471987475, 0.1146199213344291, 0.1146657288494732, 0.1147113701553019, 0.1147568456629786, 0.1148021557832063, 0.1148473009263274, 0.1148922815023226, 0.1149370979208102, 0.1149817505910451, 0.1150262399219181, 0.1150705663219555, 0.1151147301993174, 0.115158731961798, 0.1152025720168236, 0.115246250771453, 0.1152897686323758, 0.1153331260059121, 0.1153763232980114, 0.1154193609142521, 0.1154622392598406, 0.1155049587396104, 0.1155475197580215, 0.1155899227191594, 0.1156321680267346, 0.1156742560840815, 0.1157161872941578, 0.115757962059544, 0.1157995807824419, 0.1158410438646746, 0.1158823517076852, 0.1159235047125363, 0.115964503279909, 0.1160053478101026, 0.1160460387030331, 0.1160865763582331, 0.1161269611748506, 0.1161671935516487, 0.1162072738870041, 0.1162472025789071, 0.1162869800249604, 0.1163266066223785, 0.1163660827679868, 0.116405408858221, 0.1164445852891261, 0.1164836124563561, 0.1165224907551727, 0.1165612205804449, 0.1165998023266479, 0.116638236387863, 0.116676523157776, 0.116714663029677, 0.1167526563964596, 0.1167905036506199, 0.116828205184256, 0.116865761389067, 0.1169031726563524, 0.1169404393770114, 0.1169775619415421, 0.1170145407400405, 0.1170513761622002, 0.1170880685973113, 0.1171246184342597, 0.1171610260615264, 0.1171972918671869, 0.1172334162389101, 0.1172693995639579, 0.117305242229184, 0.1173409446210339, 0.1173765071255432, 0.1174119301283376, 0.1174472140146319, 0.1174823591692289, 0.1175173659765194, 0.1175522348204807, 0.1175869660846764, 0.1176215601522551, 0.1176560174059502, 0.1176903382280788, 0.1177245230005411, 0.1177585721048197, 0.1177924859219785, 0.1178262648326623, 0.1178599092170959, 0.1178934194550836, 0.117926795926008, 0.1179600390088294, 0.1179931490820855, 0.1180261265238898, 0.1180589717119316, 0.1180916850234749, 0.1181242668353578, 0.1181567175239914, 0.1181890374653596, 0.1182212270350177, 0.1182532866080924, 0.1182852165592802, 0.1183170172628474, 0.1183486890926289, 0.1183802324220275, 0.1184116476240134, 0.118442935071123, 0.1184740951354587, 0.1185051281886875, 0.1185360346020408, 0.1185668147463135, 0.118597468991863, 0.1186279977086086, 0.118658401266031, 0.118688680033171, 0.1187188343786293, 0.1187488646705654, 0.1187787712766969, 0.1188085545642988, 0.1188382149002028, 0.1188677526507963, 0.1188971681820219, 0.1189264618593767, 0.1189556340479111, 0.1189846851122286, 0.1190136154164846, 0.119042425324386, 0.1190711151991901, 0.1190996854037041, 0.1191281363002842, 0.119156468250835, 0.1191846816168085, 0.1192127767592037, 0.1192407540385654, 0.1192686138149838, 0.1192963564480936, 0.1193239822970732, 0.1193514917206442, 0.1193788850770703, 0.1194061627241566, 0.1194333250192491, 0.1194603723192339, 0.119487304980536, 0.1195141233591191, 0.1195408278104847, 0.1195674186896711, 0.1195938963512529, 0.1196202611493401, 0.1196465134375775, 0.1196726535691439, 0.1196986818967513, 0.1197245987726439, 0.1197504045485979, 0.1197760995759205, 0.1198016842054489, 0.1198271587875497, 0.1198525236721186, 0.1198777792085789, 0.1199029257458813, 0.1199279636325028, 0.1199528932164464, 0.1199777148452397, 0.1200024288659348, 0.1200270356251072, 0.1200515354688552, 0.1200759287427991, 0.1201002157920803, 0.1201243969613608, 0.1201484725948225, 0.1201724430361662, 0.1201963086286109, 0.1202200697148934, 0.120243726637267, 0.1202672797375014, 0.1202907293568814, 0.1203140758362066, 0.1203373195157902, 0.1203604607354587, 0.1203834998345511, 0.120406437151918, 0.1204292730259207, 0.120452007794431, 0.1204746417948301, 0.1204971753640079, 0.1205196088383623, 0.1205419425537987, 0.1205641768457289, 0.1205863120490704, 0.1206083484982462, 0.1206302865271835, 0.120652126469313, 0.1206738686575687, 0.1206955134243868, 0.1207170611017047, 0.120738512020961, 0.1207598665130943, 0.1207811249085425, 0.1208022875372422, 0.120823354728628, 0.1208443268116318, 0.120865204114682, 0.1208859869657028, 0.1209066756921137, 0.1209272706208285, 0.1209477720782548, 0.1209681803902932, 0.1209884958823366, 0.1210087188792698, 0.1210288497054682, 0.1210488886847977, 0.1210688361406137, 0.1210886923957604, 0.1211084577725703, 0.1211281325928634, 0.1211477171779463, 0.121167211848612, 0.1211866169251388, 0.1212059327272899, 0.1212251595743125, 0.1212442977849371, 0.1212633476773772, 0.1212823095693283, 0.121301183777967, 0.1213199706199511, 0.1213386704114181, 0.1213572834679851, 0.1213758101047478, 0.1213942506362802, 0.1214126053766335, 0.1214308746393356, 0.1214490587373908, 0.1214671579832787, 0.1214851726889536, 0.1215031031658441, 0.1215209497248523, 0.1215387126763532, 0.1215563923301938, 0.121573988995693, 0.1215915029816405, 0.1216089345962962, 0.12162628414739, 0.1216435519421206, 0.1216607382871551, 0.1216778434886287, 0.1216948678521434, 0.121711811682768, 0.1217286752850372, 0.1217454589629511, 0.1217621630199743, 0.1217787877590357, 0.1217953334825277, 0.1218118004923054, 0.1218281890896865, 0.12184449957545, 0.1218607322498364, 0.1218768874125464, 0.1218929653627409, 0.1219089663990397, 0.1219248908195217, 0.1219407389217239, 0.1219565110026408, 0.1219722073587238, 0.1219878282858808};

        public void EquationsTests13DistributedModelBuilder()
        {
            IsoparametricJacobian3D.DeterminantTolerance = 1e-20;
        }
        
        [Theory]
        [InlineData("../../../DataFiles/workingTetMesh2185_1Domain.mphtxt")]
        public void SolveEquationCOxNonLinearProduction(string fileName)
        {
            var mesh = new ComsolMeshReader(fileName);
            foreach (var element in mesh.ElementConnectivity)
            {
                DomainFluidVelocity.Add(element.Key, new double[] { FluidInit, FluidInit, FluidInit });
                if (DependentLinearSource == null)
                {
                    T.Add(element.Key, TInit);
                    ProductionFuncsWithoutConstantTerm.Add(element.Key, getProductionFuncWithoutConstantTerm(element.Key));
                    ProductionFuncsWithoutConstantTermDerivative.Add(element.Key, getProductionFuncWithoutConstantTermDerivative(element.Key));
                }
            }
            var convectionDiffusionDirichletBC =
            new List<(BC, ConvectionDiffusionDof[], double[][], double[])>()
            {
                (BC.TopRightBackDiriclet, new ConvectionDiffusionDof[] { ConvectionDiffusionDof.UnknownVariable }, new double[2][]{new double[3] {0,0,0},new double[3] {0.1,0.1,0.1}}, new double[]{0.2}),


            };
            var convectionDiffusionNeumannBC = new List<(BoundaryAndInitialConditionsUtility.BoundaryConditionCase, ConvectionDiffusionDof[], double[][], double[])>();

            var nodeIdToMonitor = Utilities.FindNodeIdFromNodalCoordinates(mesh.NodesDictionary, monitorNodeCoords, 1e-4);

            var modelBuilder = new CoxModelBuilder(mesh, DomainFluidVelocity,
                                                    Dox, Aox, Kox, PerOx, Sv, CiOx, T, CInitialOx,
                                                    IndependentLinearSource, DependentLinearSource, ProductionFuncsWithoutConstantTerm, ProductionFuncsWithoutConstantTermDerivative,
                                                    nodeIdToMonitor, coxMonitorDOF,
                                                    convectionDiffusionDirichletBC, convectionDiffusionNeumannBC);
            var model = modelBuilder.GetModel();
            modelBuilder.AddBoundaryConditions(model);

            (var analyzer, var solver, var nlAnalyzers) = modelBuilder.GetAppropriateSolverAnalyzerAndLog(model, TimeStep, TotalTime, 0, 1);

            ((NewmarkDynamicAnalyzer)analyzer).ResultStorage = new ImplicitIntegrationAnalyzerLog();

            analyzer.Initialize(true);
            analyzer.Solve();

            int totalNewmarkstepsNum = (int)Math.Truncate(TotalTime / TimeStep);
            var cox = new double[totalNewmarkstepsNum];
            for (int i1 = 0; i1 < totalNewmarkstepsNum; i1++)
            {
                var timeStepResultsLog = ((NewmarkDynamicAnalyzer)analyzer).ResultStorage.Logs[i1];
                cox[i1] = ((DOFSLog)timeStepResultsLog).DOFValues[model.GetNode(nodeIdToMonitor), coxMonitorDOF];
            }
            
            CSVExporter.ExportVectorToCSV(cox, "../../../Integration/coxNL.csv");
            Assert.True(ResultChecker.CheckResults(cox, expectedFromComsol, 1E-6));

            //Console.WriteLine("FINISHED solving Cox Non-Linear prod");

        }



    }
}
